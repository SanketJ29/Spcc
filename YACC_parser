CALCULATOR:

calci.l
%{
#include "y.tab.h"
#include<math.h>
extern double vbltable[26]; %}
%%
[0-9]+ {yylval.dval=atof(yytext); return NUMBER;  }
[\t];
[a-z]  {yylval.vblno=yytext[0] - 'a'; return NAME;}
"$" { return 0;}\n  |
 return yytext[0];
%%
int yywrap(void) {
  return 0; }
int main(void) {
 yyparse();
return 0; }
int yyerror(void) {
printf("error");
exit(1);
}

calci.y
%{
double vbltable[26];
int yylex(void); %}
%union{
 double dval;
 int vblno; }
%token <vblno> NAME
%token <dval> NUMBER
%left '-' '+' %left '*' '/'
%nonassoc UMINUS
%type <dval> expression
%%
statement_list: statement '\n'| statement_list statement '\n' ;statement: NAME '=' expression {vbltable[$1] = $3;}
|expression   {printf("=%g\n",$1);  };
expression: expression '+' expression              { $$=$1 + $3;}
| expression '-' expression  { $$=$1 - $3;}
| expression '*' expression   { $$=$1 * $3;}
 | expression '/' expression  {  if($3==0.0)
yyerror("divide by zero");
    else  $$ = $1/$3; }
 | '-' expression %prec UMINUS { $$ = -$2;}
 | '(' expression ')'  {$$ =$2;} | NUMBER
| NAME {$$ = vbltable[$1];  };
%%


VARIABLE(IDENTIFIER CHECKER)

var.l
%{
 #include "y.tab.h"
%}
%%
[a-zA-Z_][a-zA-Z_0-9]* return letter;
[0-9]     return digit;
return yytext[0];
\n  return 0;
%%
int yywrap() {
return 1;
}

var.y
%{
 #include<stdio.h>
 int valid=1; %}
%token digit letter
%%
start:letter s s :letter s | digit s | ;
%%
int yyerror() {
printf("\nIts not a identifier!\n");
    valid=0;
    return 0; }
int main() {
printf("\nEnter a name to tested for identifier ");
  yyparse();
 if(valid) { printf("\nIt is a identifier!\n");
    }
}


NESTED

nested.l
%{
#include "y.tab.h"
%}
%%
"if" {return IF;}
[sS][0-9]* {return S;}
"<"|">"|"=="|"<="|">="|"!=" {return RELOP;}
[0-9]+ {return NUMBER;}
[a-z][a-zA-Z0-9_]* {return ID;}
\n {return NL;}
. {return yytext[0];}
%%

nested.y
%{
#include<stdio.h>
#include<stdlib.h>
int count=0; %}
%token IF RELOP S NUMBER ID NL
%%
stmt: if_stmt NL {printf("No. of nested if statements=%d\n",count);exit(0);};
if_stmt:IF'('cond')''{'if_stmt'}' {count++;}|S;
cond: x RELOP x ;
x:ID | NUMBER;
%%
int yyerror(char *msg){
printf("the statement is invalid\n");
exit(0); }
main(){
printf("enter the statement\n");
yyparse();
}
int yywrap(){return(1); }


SQL PARSER

sql.l
%{
	#include "y.tab.h"
	#define yywrap() 1
%}
%%
select return SELECT;
from return FROM;
where return WHERE;
and return AND;
[a-zA-Z][a-zA-Z0-9]* return NAME;
\n return NEWLINE;
[*] return *yytext;
[=] return *yytext;
[,] return *yytext;
. ;
%%

sql.y
%{
	#include<stdio.h>
%}
%token SELECT FROM WHERE AND NAME NEWLINE
%%
statement : SELECT columns FROM names WHERE condition NEWLINE {printf("\nThe SQL Query is correct.\n");}
columns : names | '*'
names : NAME | NAME ',' names
condition : NAME '=' NAME | NAME '=' NAME AND condition
%%
int yyerror()
{
	printf("\nIt is an incorrect SQL Query.\n");
}
main()
{
	printf("Enter an SQL Query : ");
	yyparse();
}

how to run:

flex calci.l
bison calci.y
bison -dy calci.y
gcc lex.yy.c y.tab.c -o calci.exe
calci.exe
